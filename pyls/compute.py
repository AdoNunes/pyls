#!/usr/bin/env python

import multiprocessing as mp
import numpy as np
from sklearn.utils.extmath import randomized_svd
from scipy.stats import zscore


def svd(X, Y, k, norm=True):
    """
    Runs SVD on the covariance matrix of `X` and `Y`

    Uses sklearn.utils.extmath.randomized_svd for computation of a truncated
    SVD.

    Parameters
    ----------
    X : array (N x j)
    Y : array (N x k)
    k : int
        rank of Y.T @ X matrix; determines # of singular vectors generated by
        SVD
    norm : bool
        whether to zscore X and Y prior to singular value decomposition

    Returns
    -------
    U, d, V : left singular vectors, singular values, right singular vectors
    """

    if norm: X, Y = zscore(X), zscore(Y)
    U, d, V = randomized_svd(Y.T @ X, n_components=k)

    return U, np.diag(d), V.T


def procrustes(permuted, original, singular):
    """
    Performs Procrustes rotation on `permuted` to align with `orig`

    Parameters
    ----------
    permuted : array
    original : array
    singular : array

    Returns
    -------
    array : singular values of rotated `permuted` matrix
    """

    N, O, P = np.linalg.svd(original.T @ permuted)
    Q = N @ P.T
    resamp = permuted @ singular @ Q
    resamp_singular = np.sqrt((resamp**2).sum(axis=0))

    return resamp_singular


def permute(X, Y, k, perms=1000, norm=True, procs=1):
    """
    Permutes `X` (w/o replacement) and recomputes singular values

    Parameters
    ----------
    X : array (N x j)
    Y : array (N x k)
    k : int
        rank of Y.T @ X matrix
    perms : int
        number of permutations to run
    norm : bool
        whether to zscore X and Y prior to singular value decomposition
    procs : int
        function will multiprocess permutations for potential speed-up

    Returns
    -------
    array : distributions of singular values
    """

    pass


def bootstrap(X, Y, k, boots=500, norm=True, procs=1):
    """
    Bootstrap `X`/`Y` (with replacement) and computes SE of singular values

    Parameters
    ----------
    X : array (N x j)
    Y : array (N x k)
    k : int
        rank of Y.T @ X matrix
    boots : int
        number of boostraps to run
    norm : bool
        whether to zscore X and Y prior to singular value decomposition
    procs : int
        function will multiprocess bootstraps for potential speed-up

    Returns
    -------
    array
    """

    pass
